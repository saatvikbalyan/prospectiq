// This file is typically generated by the Supabase CLI: `npx supabase gen types typescript --project-id <your-project-id> --schema public > types/supabase.ts`
// For now, I'll define a basic structure based on your `icps` table.
// You should generate this properly using the Supabase CLI for full type safety.

export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      icps: {
        Row: {
          id: string
          name: string
          description: string
          custom_parameters: Json | null // Assuming CustomParameter[] will be stored as JSON
          date_modified: string
          color: string | null
          assistant_id: string | null
          system_prompt: string | null
          user_id: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          name: string
          description: string
          custom_parameters?: Json | null
          date_modified?: string // Defaulted in DB
          color?: string | null
          assistant_id?: string | null
          system_prompt?: string | null
          user_id?: string | null // Defaulted in DB to auth.uid()
          created_at?: string // Defaulted in DB
          updated_at?: string // Defaulted in DB
        }
        Update: {
          id?: string
          name?: string
          description?: string
          custom_parameters?: Json | null
          date_modified?: string
          color?: string | null
          assistant_id?: string | null
          system_prompt?: string | null
          user_id?: string
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "icps_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
